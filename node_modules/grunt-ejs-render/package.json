{
  "name": "grunt-ejs-render",
  "description": "Render EJS templates with custom data and helpers",
  "version": "0.1.1",
  "homepage": "https://github.com/dwightjack/grunt-ejs-render",
  "author": {
    "name": "Marco Solazzi",
    "email": "marco.solazzi@gmail.com",
    "url": "https://twitter.com/dwightjack"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dwightjack/grunt-ejs-render.git"
  },
  "bugs": {
    "url": "https://github.com/dwightjack/grunt-ejs-render/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/dwightjack/grunt-ejs-render/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "ejs": "~0.8.4"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "ejs",
    "render"
  ],
  "readme": "# grunt-ejs-render\r\n\r\n> Render ejs templates with custom data and helpers\r\n\r\nThis plugin provides ejs static rendering to enhance static file development.\r\n\r\nAside from default [ejs features](https://github.com/visionmedia/ejs#features) it provides:\r\n\r\n* Lo-Dash/underscore functions (http://lodash.com/docs)\r\n* Lo-Dash/underscore templates powered view partials (http://lodash.com/docs#template)\r\n* an easy way to define custom _per task_ helpers \r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-ejs-render --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-ejs-render');\r\n```\r\n\r\n## The \"render\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `render` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  render: {\r\n    options: {\r\n      // Task-specific options go here.\r\n    },\r\n    your_target: {\r\n      // Target-specific file lists and/or options go here.\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### options._\r\nType: `Object`\r\nDefault value: `grunt.util._`\r\n\r\nA reference to a [Lo-Dash](http://lodash.com) build. Defaults to the one shipped with Grunt.\r\n\r\n\r\n```js\r\n\r\n//load a Backbone build of Lo-Dash\r\nvar bb_ = require('./customlibs/lodash/lodash-backbone.js');\r\n\r\ngrunt.initConfig({\r\n  render: {\r\n    options: {\r\n     '_' : bb_ \r\n    }\r\n    //...\r\n  }\r\n})\r\n```\r\n\r\n\r\n\r\nInside a template you may access Lo-Dash functions from `_`:\r\n\r\n```\r\n<p><%= _.first(['orange', 'lemon', 'apple']) %></p>\r\n<!-- oputputs <p>orange</p> -->\r\n```\r\n\r\n\r\n#### options.data\r\nType: `Object|String`\r\nDefault value: `null`\r\n\r\nAn object containing dynamic data to be passed to templates. You may also pass a JSON filepath as a string.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  render: {\r\n    first_target: {\r\n      data: 'path/to/file.json'\r\n    },\r\n    second_target: {\r\n      data: { 'prop': 'my test'}\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nTo access datas from inside a template use `data.` namespace:\r\n\r\n```\r\n<p><%= data.prop %></p>\r\n```\r\n\r\n\r\n#### options.templates\r\nType: `Mixed`\r\nDefault value: `[]`\r\n\r\nAn [array of files](http://gruntjs.com/configuring-tasks#files) of [Lo-Dash templates](http://lodash.com/docs#template) to be used inside a main template file. May be useful to reuse client side templates to render a static file.\r\n\r\nCompiled templates will be indexed by their filename without extension, and are accessible with the `helpers.template` helper method\r\n\r\nTemplate configuration\r\n\r\n```js\r\ngrunt.initConfig({\r\n  render: {\r\n    options: {\r\n      templates: ['templates/*.tpl']\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nUsage\r\n\r\n```\r\n<!-- templates/list.tpl -->\r\n\r\n<% fruits.forEach(function (fruit) { %>\r\n  <li><%= fruit %></li>\r\n<% }); %>\r\n```\r\n\r\n```\r\n<!-- main.html -->\r\n\r\n<p><%= helpers.template('list', {fruits: ['orange', 'lemon', 'apple']}) %></p>\r\n```\r\n\r\n#### options.helpers\r\nType: `Object`\r\nDefault value: `{}`\r\n\r\nHash of custom methods for usage inside a template.\r\n\r\nDefault helpers are:\r\n\r\n* `template('templatename', dataObject)`: executes a precompiled Lo-Dash template (if available) with provided data object\r\n* `getMTime('filepath')`: returns the last modified time (as unix timestamp) of the passed in file. `filepath` is relative to `Gruntfile.js`\r\n\r\nHelpers configuration\r\n\r\n```js\r\ngrunt.initConfig({\r\n  render: {\r\n    helpers: {\r\n      //set a custom helper\r\n      timestamp: function () { return new Date().getTime(); }\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nUsage inside template\r\n\r\n```\r\n<!-- cache bursting -->\r\n<script src=\"/lib/script.js?v=<%= helpers.getMTime('/lib/script.js') %>\"></script>\r\n\r\n<!-- lo dash template -->\r\n<p><%= helpers.template('list', {fruits: ['orange', 'lemon', 'apple']}) %></p>\r\n\r\n<!-- custom helper -->\r\n<p>build timestamp: <%= helpers.timestamp() %></p>\r\n```\r\n\r\n\r\n### Usage Examples\r\n\r\n#### Default Options\r\nTo process a file with ejs just pass it to the `files` array:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  render: {\r\n    options: {},\r\n    files: {\r\n      'dest/index.html': ['src/index.html']\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n#### Custom Options\r\nYou may provide custom options:\r\n\r\n```js\r\ngrunt.initConfig({\r\n  render: {\r\n    options: {\r\n      data: 'data/fruits.json'\r\n      helpers: {\r\n        timestamp: function () { return new Date().getTime(); }\r\n      },\r\n      templates: ['templates/*.tpl']\r\n    },\r\n    files: {\r\n      'dest/fruits.html': ['src/fruits.html']\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n\r\n\r\n0.1.0 - Initial release\r\n0.1.1 - Better Docs\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-ejs-render@0.1.1",
  "dist": {
    "shasum": "6ace0713c8615970229cd31aa13e9f07d244196c"
  },
  "_from": "grunt-ejs-render@",
  "_resolved": "https://registry.npmjs.org/grunt-ejs-render/-/grunt-ejs-render-0.1.1.tgz"
}
